# general
/bin/ls

# 우선순위
true || true && false
true || (true && false)
true && (true || false)
true && (aewf || true)       
(asdf || echo 5) && echo 6
(asdf || weaf) && echo 6
(asdf || echo 1 ) && awef

# 리다이렉션
cat infile > outfile;

## 안되는거
ls> file
> file cmd data
cmd > file data
<<eof 한 후 eof 입력하면 프롬프트 두번 호출됨 ... ctrl+d 하면 개행없이 프롬프트 호출됨..

## heredoc
<< eof out
<< eof cat
<< eof > out
<< eof cat > out
echo << eof ttttt
echo << eof
cat << eof
cat << eof bbb
cat << eof < out
<<
<<eof


## &&

## ||

##  pipe(|)

## redirection
cat > out

## parentheses
false && ((false || false) || true)

echo 1 | ( sleep 2 | sleep 4) | ( echo 1 && echo 2) | echo 66
true || false | false  && false 
true || false | (false  && false)
true || false | false  || false
true || false | ( false  || false)
( echo 1 || echo 2 ) | echo 3 && echo 4 # 34
( aaa || echo 2 ) | echo 3 && bb

## syntex error
(cmd)
((cmd)
)cmd
()
echo 'a''
echo '''a'
echo "'"a'"
echo 1 (
&& cmd
|| cmd
| cmd
cmd &&
cmd ||
cmd |
echo "$USER
echo '$USER
echo $USER'
echo $USER"
echo ""''$USER"''""
echo ""'''$USER''""
### quote 규칙
# 1. 바깥 쌍부터 체크한다.
# -> 쌍이 성립되지 않는다면, 에러.
# echo "test => 에러
# echo "test" => test
# echo ""''test'''"" => 에러 : '는 ""에 쌓여져 있지 않음 (3번참조)

# 2. 쌍 개수가 홀수라면
# "인경우 : $는 해석, 그 외에는 문자열 출력 :: echo "$USER'" => staek'
# '인경우 : 문자열 출력 :: echo '"$USER' => "$USER

# 3. 쌍 개수가 짝수라면 없는 quote는 애초에 없었던 것 처럼 초기화된다.
# echo ""test"" => test
# echo ""test'"" => 에러 : '는 ""에 쌓여져 있지 않음
# echo ""''test''"" => test

## exit code
echo 1 # 0
ctrl + c # 130

## signal (kill -l)
(cat || cat) # sigint 1번
cat || cat# sigint 1번
cat | cat # sigint 1번
(cat | cat) # sigint 1번 안됨₩₩₩₩₩₩₩₩₩₩₩₩₩₩₩₩ 130
<<eof # sigint 1번

ls -al | grep test | waef
awef | awef | ls -al

명령어 종료 방식 - sigint 몇번에 종료
$? 에 저장 방식, 순서 등
$HOME
$USER
$?

ls -al | grep test | waef # $? : 127
 awef | awef | ls -al


## 접근불가 권한
mkdir test; chmod 400 test; cd test ## exitcode 1
chmod 000 a.out; ./a.out ## exitcode 126
/dev/null ## exitcode 126




cat < out < out2 | < out3 < out4 # 파일 없는경우.
<< eof cat > out
cat << eof bbb


cat << eof < out


마지막 노드가 변하는 경우
cat || cat

cat ||| cat
(cat a || ( cat b  || ))
(ls || ( ls  || ))

[O] (asdf || echo 5) && echo 6

[O] *
[X] file*
[X] *file
[X] *file*file*file

[X] ls || << abc
[X] <<abc | << abc
[X] sleep 5 && cat <<o aewf
sleep 5 && cat <<a > bb && cat <<b > cc && echo 5
heredoc 키보드 ........
 echo 1 | <<eoc && echo 2
 cat <<a > out | cat <<b > out2 # ctrl+c 1회 130 확인
 echo 1 | ( sleep 2 && sleep 4) | ( echo 1 && echo 2) | echo 66


echo 1 | echo 3 && cat < in 



#
system("leaks shell");
//view_token(&lexer); // debug
//view_ast(astree, 0, "n");//debug
#

######### 원인모름 가끔 뻑남 해결 필요
echo *f*r*e.c && echo *f*r*e.c | echo *f*r*e.c && echo *f*r*e.c && echo $HOME 
echo 1 && cat <<a > out | cat <<b > out2 && echo 2

echo *re*e* # 이거 결과 이상함




> out awefawef # 에러가 안나
ech oaewf > out # 이럿도 에러 나와야 함



#syntex error
/*
	되는거
	)), )|, )||, )&&
	((, ||(, &&(, |( 
	|<, |>, |>>, |<<
	||<, ||>, ||>>, ||<<
	&&<, &&>, &&>>, &&<<
	(<, (>, (>>, (<<
	)<, )>, )>>, )<<		
*/
/*
	안되는거
	1. 처음문자가 &&, |, ||,  )
	2. 마지막문자가 &&, |, ||
	3. () 개수 안맞음
	4. 중간문자
		(&&, (|, (||, ()
		|^|, |^||, |&&, |)
		||^|, ||&&, ||^||, ||)
		&&^|, &&&&, &&||, &&)
*/


# 명령어 사이 공간은 isspace로 한다. 9 10 11 12 13 32
echo 1	echo 2


################ 빌트인 테스트
# echo 
(asdf || echo 5) && echo 6



==== test case ====


echo bonjour ; |
echo bonjour | |
|
echo bonjour |;
echo bonjour ; ls
echo bonjour > test\ 1
		cd $HOME/Documents
echo "\s" & echo "\s"
echo >
echo -n -n -nnnn -nnnnm
cat /dev/random | head -n 1 | cat -e
unset var1 # with undefined var1
		export "" et unset ""
echo test > file test1
$
		not_cmd bonjour > salut
		env puis export puis env # vars aren't sorted
		cat Makefile | grep pr | head -n 5 | cd test (mybin) # check status code
cat Makefile | grep pr | head -n 5 | cat test (bin) # check status code
cat Makefile | grep pr | head -n 5 | hello (NA) # check status code
echo bonjour >>> test
echo bonjour > > out
echo 2 >> out1 > out2
echo 2 > out1 >> out2
cat < test # with non-existent test
export var; export var=test
		echo bonjour > $test # with test not defined
file_name_in_current_dir
cd ../../../../../.. ; pwd
		ctrl-C . 130 sur bin(ex : sleep 10)&line vide
		ctrl-\ .131 sur bin
echo "bip | bip ; coyotte > < " "
cat | cat | cat | ls # check outputs order
$bla # with bla not defined
export var ="cat Makefile | grep >"
		export "test=ici"=coucou
c$var Makefile # with var=at
$LESS$VAR
/bin/echo bonjour
not_cmd
sleep 5 | exit
		echo bonjour > $test w/ t
"exit retour a la ligne"
minishell # binary not in path without "./" before
cat diufosgid # check exit code
exit # should return the last exit code value
		exit -10
		exit +10
;
echo coucou | ;
echo "$HOME"
echo '$HOME'
export ; env # display is different for both commands
echo $HOME
> log echo coucou
echo hudifg d | | hugdfihd
echo
echo simple
echo -n simple
echo ''
echo ""
echo "\"
echo "\n \n \n"
echo "\n \n \\n"
echo ;;
echo hi";" hihi
echo hi " ; " hihi
cd
cd .
cd ~
cd /
cd no_file
cd a b c d
pwd a
pwd a b c d
export LOL=lala ROR=rara
unset LOL ROR
export "HI= hi"
export "HI =hi"
/bin/ls
# write something the press ctrl+c
# write something then press ctrl+d
# write something then press ctrl+\
echo $?
l^Ds
echo |
| echo
sort | ls # check output order
cat < >
cat < <
cat > >
> a ls > b < Makefile
echo > a Hello World!
> a echo Hello World!
	cat < Makefile | grep gcc > output
	exit 0 | exit 1
	exit 1 | exit 0


=== not working

	cd $HOME/Documents
	export "" et unset ""
not_cmd bonjour > salut
	env puis export puis env # vars aren't sorted
cat Makefile | grep pr | head -n 5 | cd test (mybin) # check status code
	ctrl-C . 130 sur bin(ex : sleep 10)&line vide
	ctrl-\ .131 sur bin
	export "test=ici"=coucou
	echo bonjour > $test w/ t
	exit -10
	exit +10
cat < Makefile | grep cc > output
exit 0 | exit 1
exit 1 | exit 0



cat < out < out2 > out3 > out4

echo 1 > out | echo 2 > out2
cat < out | echo 2 > out2
cat < out | echo aa < out2
cat < out | cat < out2
echo 111 > out | echo 2 < out2
echo 111 > out | cat < out2

ls | echo 1 > out | echo 2 > out2 | ls
ls | cat < out | echo 2 > out2 | ls
ls | cat < out | echo aa < out2 | ls
ls | cat < out | cat < out2 | ls
ls | echo 111 > out | echo 2 < out2 | ls
ls | echo 111 > out | cat < out2 | ls

=======
leak 테스트

=== 체크 ===
norm, leak
헤더, 시그널
종료코드

=== 개발 필요 ===

echo *re*e* 
빌트인 조합


=== 파이프 & 리다이렉션

ls | echo 1 > out | ls
ls | wc > out | ls
ls | cat > out | ls

ls | cat < out > out2 | ls
ls | cat < out < out > out2 > out3 | ls

cat > out | ls

cat | ls



<out <out2 echo <out3 aef >out4 awefae >out5 || echo 3

 ( Echo 1 || ecHo 2 ) | cat
 (echo 1 && cat <out2) | cat

 cat <out | > out3
  (cat <out2) | cat
  ls |  (cat <out2) | (grep a) | wc
  (sleep 2 | sleep 3 | sleep 2) | sleep 2
  cat /dev/random | head -n 1 | cat -e




  (cat | cat) # ctrl +c 종료 후 에러코드
    (sleep 2 | sleep 3 | sleep 2) | echo 1 # 에러코드